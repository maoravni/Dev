#ifndef _BtcCfgDB_h_
#define _BtcCfgDB_h_

#ifdef __cplusplus
extern "C"
{
#endif
   
#include "cfgDBUtil.h"

typedef enum
{
    BTC_STATE_ON,
    BTC_STATE_STANDBY,
    BTC_STATE_MOVE2RDY,
    BTC_STATE_RDY,
    BTC_STATE_SERVICE,
    BTC_STATE_MOVE2ON,
    BTC_STATE_ERROR,
} BTC_STATE;

enum BTC_COMMANDS
{
    BTC_COMMANDS_NONE,
//operational- serves only when not in service mode
    BTC_COMMANDS_ENABLE_COOLING,
    BTC_COMMANDS_DISABLE_COOLING,

// service entering - serves only when at disable cooling mode
    BTC_COMMANDS_ENABLE_SERVICE_MODE,
    BTC_COMMANDS_DISABLE_SERVICE_MODE,

//service - serves only during service mode
    BTC_COMMANDS_SERVICE_ENABLE_FRESH_WATER,
    BTC_COMMANDS_SERVICE_DISABLE_FRESH_WATER,
    BTC_COMMANDS_SERVICE_ENABLE_ENGAGE,
    BTC_COMMANDS_SERVICE_DISABLE_ENGAGE,
    BTC_COMMANDS_SERVICE_ENABLE_AIR_KNIFE,
    BTC_COMMANDS_SERVICE_DISABLE_AIR_KNIFE,
    BTC_COMMANDS_SERVICE_ENABLE_DRAIN_TANK,
    BTC_COMMANDS_SERVICE_DISABLE_DRAIN_TANK,
    BTC_COMMANDS_SERVICE_ENABLE_FILL_PUMP,  //12
    BTC_COMMANDS_SERVICE_DISABLE_FILL_PUMP, //13
    BTC_COMMANDS_SERVICE_ENABLE_DRAIN_PUMP,
    BTC_COMMANDS_SERVICE_DISABLE_DRAIN_PUMP,
} ;

typedef enum
{
        ID_BTC_CFG_INT_BLANKET_SP= ID_BTC_CFG_INT_FIRST,
        ID_BTC_CFG_INT_BLANKET_PID_P ,
        ID_BTC_CFG_INT_BLANKET_PID_I,
        ID_BTC_CFG_INT_BLANKET_PID_D,
        ID_BTC_CFG_INT_FILL_PUMP_HIGH_POWER_LIMIT,
        ID_BTC_CFG_INT_FILL_PUMP_LOW_POWER_LIMIT,
        ID_BTC_CFG_INT_DRAIN_PUMP_POWER, //in %
        ID_BTC_CFG_INT_WATER_TANK_FILL_TIME_OUT, //in sec
        ID_BTC_CFG_INT_AIR_KNIFE_PRESSURE_TIME_OUT, //in sec
        ID_BTC_CFG_INT_ENGAGE_TIME_OUT, //in sec
        ID_BTC_CFG_INT_WATER_TANK_HIGH_TEMPERATURE_LIMIT,
        ID_BTC_CFG_INT_WATER_LINE_HIGH_TEMPERATURE_LIMIT,
        ID_BTC_CFG_INT_WATER_CONTAMINATION_HIGH_LIMIT,

    ID_BTC_CFG_INT_LAST, /* for debug only*/
}BTC_Cfg_ID_Enum;

typedef enum
{
        ID_BTC_CMND_INT_COMMAND= ID_BTC_CMND_INT_FIRST,
        ID_BTC_CMND_INT_FILL_PUMP_ENABLE,
        ID_BTC_CMND_INT_DRAIN_PUMP_ENABLE,
        ID_BTC_CMND_INT_ENGAGE_ENABLE,
        ID_BTC_CMND_AIR_PRESSURE_KIFE_CMND_ENABLE,
        ID_BTC_CMND_TANK_DRAIN_WATER_ENABLE,
	ID_BTC_CMND_INT_LAST, /* for debug only*/
}BTC_Cmnd_ID_Enum;


typedef enum
{
		
	ID_BTC_MNTR_INT_STATE=ID_BTC_MNTR_INT_FIRST,
	ID_BTC_MNTR_INT_BLANKET_TEMPERATURE,
	ID_BTC_MNTR_INT_FILL_PUMP_POWER,   //power pump
	ID_BTC_MNTR_INT_WATER_CONTAMINATION,
	ID_BTC_MNTR_INT_ENGAGE,
	ID_BTC_MNTR_INT_ALARM_GLOBAL,
#if 0
	ID_BTC_MNTR_INT_ALARM_ENGAGE_TIME_OUT,
	ID_BTC_MNTR_INT_ALARM_FILL_WATER_TIME_OUT,
	ID_BTC_MNTR_INT_ALARM_AIR_KNIFE_TIME_OUT,
	ID_BTC_MNTR_INT_ALARM_WATER_TANK_EXCEED_TEMPREATURE,
	ID_BTC_MNTR_INT_ALARM_WATER_LINE_EXCEED_TEMPREATURE,
	ID_BTC_MNTR_INT_ALARM_WATER_CONTAMINATION,
	ID_BTC_MNTR_INT_ALARM_WATER_TANK_OVERFLOW,
	ID_BTC_MNTR_INT_ALARM_TUB_OVERFLOW,
	ID_BTC_MNTR_INT_ALARM_DRAWER,
	ID_BTC_MNTR_INT_ALARM_BLANKET,
#endif
	ID_BTC_MNTR_INT_LAST, /* for debug only*/
}BTC_Monitor_ID_Enum;


typedef enum
{
	ID_BTC_CFG_STR_NOT_USED=ID_BTC_CFG_STR_FIRST,

	ID_BTC_CFG_STR_LAST /* for debug only*/

} BTC_Str_ID_Enum;


typedef enum
{

    ID_BTC_VOLATILE_STR__NOT_USED=ID_BTC_VOLATILE_STR_FIRST,

    ID_BTC_VOLATILE_STR_LAST
} BTC_VolatileStr_ID_Enum;


/* the following routine should not be called directly. The serve the DB handle routines */

STATUS BtcCfgInit();
STATUS BtcCfgUpdateFromSource( BOOL LoadConfigFromUnit);
STATUS BtcCfgBuildDB(BOOL SkipDefaultFile);
STATUS BtcCfgDelete();
STATUS BtcCfgDB_GetElement (CfgDB_ID Id, CfgDB_ID_data * buff,int DataLen,CfgDB_GET_FLAG GetFlag);
STATUS BtcCfgDB_SetElement ( CfgDB_ID Id, CfgDB_ID_data * buff,CfgDB_SET_FLAG SetFlag);
STATUS BtcCfg_UpdateApplicExistanceFileDbElements();
CfgDB_ID_IntDescriptor * BtcCfg_DbIntDescriptor(CfgDB_ACCESS_TYPE AccessType,int *NumOfElements);
CfgDB_ID_StrDescriptor * BtcCfg_DbStrDescriptor(CfgDB_ACCESS_TYPE AccessType,int *NumOfElements);
int BtcCfgDbReady();
int BtcDbInInit();

#ifdef __cplusplus
}
#endif

#endif
